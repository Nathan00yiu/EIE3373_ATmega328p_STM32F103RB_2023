#include "stm32f10x.h"                  // Device header
#include "stdbool.h"

//FTAQ4

#define BUTTON_RCC_GPIO RCC_APB2Periph_GPIOA
#define BUTTON_GPIO GPIOA
#define BUTTON_GPIO_PIN GPIO_Pin_1

static __IO uint32_t msTicks;

void DelayMs(uint32_t ms)
{
	msTicks = ms; //Reload us value
	while (msTicks); //Wait until msTicks reaches zero
}

//SysTick_Handler function will be called every 1 ms
void SysTick_Handler()
{
	if(msTicks != 0)
		msTicks--;
}

int main(void) 
{
	//GPIO clock for I/O (PA1)
	RCC_APB2PeriphClockCmd(BUTTON_RCC_GPIO, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	
	
	//Timer 2 set up
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 0;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = 2;
	timerInitStructure.TIM_ClockDivision = 0;
	timerInitStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
	TIM_Cmd(TIM2, ENABLE);
	
	TIM_TIxExternalClockConfig(TIM2, TIM_TIxExternalCLK1Source_TI2, TIM_ICPolarity_Rising, 0);
	
	//Enable update event, interrupt for Timer2
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);	
	NVIC_EnableIRQ(TIM2_IRQn);	
	
	//USART2 TX RX
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
	
	//Tx pin 
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	
	//Rx pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	
	//USART2 ST-LINK USB
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
	
	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART2, &USART_InitStructure);
	USART_Cmd(USART2, ENABLE);
	
	NVIC_InitTypeDef NVIC_InitStructure;
	// Enable the USART2 TX Interrupt
	USART_ITConfig(USART2, USART_IT_TC, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	
	//Enable the USART2 RX Interrupt
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	
	SystemCoreClockUpdate(); //Update SystemCoreClock value
	
	//Configure the SysTick timer to overflow every 1 ms
	SysTick_Config(SystemCoreClock / 1000);
	while(1);
}
char state = 0;

void TIM2_IRQHandler(void)
{
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
	{
		if(state == 0)
		{
			state = 1;
		}
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
	}
}
unsigned char secondinput = 0;
unsigned char thridinput = 0;
unsigned char check1 = 0;
unsigned char check2 = 0;
unsigned char check11 = 0;
unsigned char input = 0;

void USART2_IRQHandler()
{
	if(USART_GetITStatus(USART2, USART_IT_TC) != RESET)
	{
		if(state == 0)
		{
			USART_SendData(USART2, 'A');
			DelayMs(1000);
		}
		else if(state == 1)
		{
			USART_SendData(USART2, 'X');
			DelayMs(500);
		}
		//USART_ClearITPendingBit(USART2, USART_IT_TC)
	}
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
	{
		input = (unsigned char) USART_ReceiveData(USART2);
		if(check1 == 0 && check11 == 0)
		{
			secondinput = input;
			if(secondinput == '1')
			{
				check1 = 1;
			}
		}
		else if(check1 == 1)
		{
			thridinput = input;
			if(thridinput == '2')
			{
				check2 = 1;
				check11 = 1;
				check1 = 0;
			}
			else
			{
				check1 = 0;
				check11 = 0;
			}
		}
		else if(check2 == 1)
		{
			if(input == '3')
			{
				state = 0;
			}
			check1 = 0;
			check2 = 0;
			check11 = 0;
		}
	}
}
