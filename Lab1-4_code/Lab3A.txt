/*
 * Lab3A.c
 *
 * Created: 26/10/2023 8:30:56 am
 * Author : 21093734d
 */ 

#include <avr/io.h>
#include <avr/interrupt.h> //import interrupt header file

unsigned int timer1 = 0;
unsigned int state = 1;
unsigned int wait5 = 0;
int main(void)
{
	DDRC = 0xFF; //enable port c as output
	DDRB = 0xFF; //enable port b as output
	OCR0A = 3; //set OCR0A = 3
	OCR1A = 100; //set OCR1A = 50 (tested 100 work better)
	TCCR0A = 0x02; //set timer0 CTC mode
	TCCR0B = 0x07; //set timer0 rising edge mode, counter mode
	TCCR1A = 0x00; //Timer1 = CTC mode
	TCCR1B = 0x0C; //set timer1 CTC mode, per-scaler = 1024
	TIMSK0 = (1<<OCIE0A); //enable timer0 CTC interrupt, using OCR0A
	TIMSK1 = (1<<OCIE1A); //enable timer1 CTC interrupt, using OCR1A
	sei(); //enable interrupt
	while (1) 
    {
    }
}
ISR (TIMER0_COMPA_vect)
{
	PORTC = PORTC ^ 0x01;
}
ISR (TIMER1_COMPA_vect)
{
	if(timer1 == 600)
	{
		if(state == 1)
		{
			timer1 = 0;
			PORTC &= 0x01;
			PORTB = 0x00;
			PORTC ^= 0x10;
			PORTB ^= 0x21;
			state = 2;
		}
		else if (state == 2)
		{
			timer1 = 0;
			if(wait5 != 5)
			{
				wait5++;
			}
			else if(wait5 == 5)
			{
				PORTC &= 0x01;
				PORTB = 0x00;
				PORTC ^= 0x10;
				PORTB ^= 0x11;
				state = 3;
				wait5 = 0;
			}
		}
		else if (state == 3)
		{
			timer1 = 0;
			PORTC &= 0x01;
			PORTB = 0x00;
			PORTC ^= 0x10;
			PORTB ^= 0x09;
			state = 4;
		}
		else if (state == 4)
		{
			timer1 = 0;
			PORTC &= 0x01;
			PORTB = 0x00;
			PORTC ^= 0x10;
			PORTB ^= 0x0B;
			state = 5;
		}
		else if (state == 5)
		{
			timer1 = 0;
			PORTC &= 0x01;
			PORTB = 0x00;
			PORTC ^= 0x20;
			PORTB ^= 0x0C;
			state = 6;	
			wait5 = 0;			
			
		}
		else if (state == 6)
		{
			timer1 = 0;
			if(wait5 != 5)
			{
				wait5++;
			}
			else if(wait5 == 5)
			{
				state = 7;
				PORTC &= 0x01;
				PORTB = 0x00;
				PORTB ^= 0x0A;
				for(int i = 0; i < 16; i++)
				{
					PORTC = PORTC ^ 0x20; 
					for(int j = 0; j < 10000; j++)
					{
						OCR2A = 100; //set OCR2A = 100, count 100 times //use timer2
						TCCR2A = 0x02; //set CTC mode
						TCCR2B = 0x01; //set no pre-scaler
						while((TIFR2&(1<<OCF2A))==0); //when OCF2A overflow, reset
						TCCR2A = 0;
						TIFR2 = 0x02;
					}
				}
				wait5 = 0;
			}
		}
		else if (state == 7)
		{
			timer1 = 0;
			PORTC &= 0x01;
			PORTB = 0x00;
			PORTC ^= 0x10;
			PORTB ^= 0x09;
			state = 8;
		}
		else if (state == 8)
		{
			timer1 = 0;
			PORTC &= 0x01;
			PORTB = 0x00;
			PORTC ^= 0x10;
			PORTB ^= 0x19;
			state = 1;
		}
	}
	timer1++;
}
