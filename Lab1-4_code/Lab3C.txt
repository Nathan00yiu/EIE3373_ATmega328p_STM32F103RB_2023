/*
 * Lab3C.c
 *
 * Created: 1/11/2023 11:36:51 am
 * Author : 21093734d
 */ 

#include <avr/io.h>


#include <avr/io.h>
#include <avr/interrupt.h>

unsigned int state = 1;
unsigned int counter = 0;
unsigned int light = 0;

void state1()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x10;
	PORTB ^= 0x21;
}
void state2()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x10;
	PORTB ^= 0x11;
}
void state3()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x10;
	PORTB ^= 0x09;
}
void state4()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x10;
	PORTB ^= 0x0B;
}
void state5()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x20;
	PORTB ^= 0x0C;
}
void state6()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTB ^= 0x0A;
	for(int i = 0; i < 16; i++)
	{
		PORTC = PORTC ^ 0x20;
		for(int j = 0; j < 10000; j++)
		{
			OCR0A = 100; //set OCR0A = 100, count 100 times
			TCCR0A = 0x02; //set CTC mode
			TCCR0B = 0x01; //set no pre-scaler
			while((TIFR0&(1<<OCF0A))==0); //when OCF0A overflow, reset
			TCCR0A = 0;
			TIFR0 = 0x02;
		}
	}
}
void state7()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x10;
	PORTB ^= 0x09;
}
void state8()
{
	PORTB &= 0x00;
	PORTC &= 0x01;
	PORTC ^= 0x10;
	PORTB ^= 0x19;
}
void delay1s()
{
	for(int i = 0; i < 16; i++)
	{
		if(light == 0)
		{
			i = 16;
		}
		for(int j = 0; j < 10000; j++)
		{
			if(light == 0)
			{
				j = 16;
			}
			OCR0A = 100; //set OCR0A = 100, count 100 times
			TCCR0A = 0x02; //set CTC mode
			TCCR0B = 0x01; //set no pre-scaler
			while((TIFR0&(1<<OCF0A))==0); //when OCF0A overflow, reset
			TCCR0A = 0;
			TIFR0 = 0x02;
		}
	}
}
int main(void)
{
	DDRB = 0xFF; //enable port b as output
	DDRC = 0xFF;
	EICRA = 0x0A; //ISC11, ISC10 = 10 INT1 = falling edge, ISC01, ISC00 = 10 INT0 = falling edge 
	EIMSK = 0x03; // enable INT0, INT1 fact
	sei();  //SREG I flag set
	while (1)
	{
		if(light == 0)
		{
			PORTB = 0x00;
			PORTC &= 0x01;
		}
		else if(light == 1)
		{
			if(state == 1)
			{				
				state1();
				for(int i = 0; i < 5; i++)
				{
					delay1s();
				}
				state = 2;
			}
			else if(state == 2)
			{
				state2();
				delay1s();
				state = 3;
			}
			else if(state == 3)
			{
				state3();
				delay1s();
				state = 4;
			}
			else if(state == 4)
			{
				state4();
				delay1s();
				state = 5;
			}
			else if(state == 5)
			{
				state5();
				for(int i = 0; i < 5; i++)
				{
					delay1s();
				}
				state = 6;
			}
			else if(state == 6)
			{
				state6();
				delay1s();
				state = 7;
			}
			else if(state == 7)
			{
				state7();
				delay1s();
				state = 8;
			}
			else if(state == 8)
			{
				state8();
				delay1s();
				state = 1;
			}			
		}
	}
}
ISR (INT1_vect)
{
	if(light == 0)
	{
		light = 1;			
	}
	else if(light == 1)
	{
		light = 0;
		PORTB = 0x00;
		PORTC &= 0x01;
	}
}
ISR (INT0_vect)
{
	counter++;
	if(counter == 3)
	{
		PORTC ^= 0x01;
		counter = 0;
	}
}